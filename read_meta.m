function varargout          = read_meta(name_path, name_file, file_type)
% READ_META Read in Solartron metadata text file.
% 
% VARARGOUT = READ_META(NAME_PATH,NAME_FILE,FILE_TYPE) reads in metadata
% generated by a Solartron measurement. NAME_PATH and NAME_FILE are the
% path and filename, respectively, and FILE_TYPE is either 'data', for a
% normal Solartron measurement, or 'os' for an open/short calibration
% measurement. This choice affects the number of outputs.
% 
% David Stillman, Joe MacGregor
% Last updated: 09/21/15

if (nargin ~= 3)
    error('read_meta:nargin', 'Number of arguments must be 3.')
end
if ~ischar(name_path)
    error('read_meta:name_path', 'NAME_PATH is not a string.')
end
if (~isempty(name_path) && ~exist(name_path, 'dir'))
    error('read_meta:name_path_dir', [name_path ' is not an existing directory.'])
end
if ~ischar(name_file)
    error('read_meta:name_file', 'NAME_FILE is not a string.')
end
if ~exist([name_path name_file '.txt'], 'file')
    error('read_meta:name_path_dir', [name_path name_file '.txt is not an existing file.'])
end
if ~ischar(file_type)
    error('read_meta:file_type', 'FILE_TYPE is not a string.')
end
if ~any(strcmp(file_type, {'data' 'os'}))
    error('read_meta:file_type2', 'FILE_TYPE is not either ''data'' or ''os''.')
end
switch file_type
    case 'data'
        if (nargout ~= 15)
            error('read_meta:nargout1', 'Number of outputs must be 15 if FILE_TYPE=''data''.')
        end
    case 'os'
        if (nargout ~= 2)
            error('read_meta:nargout2', 'Number of outputs must be 2 if FILE_TYPE=''os''.')
        end
end

fid                         = fopen([name_path name_file '.txt'], 'r'); % open file

meta_test                   = fscanf(fid, '%s', 1); % read in string to see if it's new or not
if isnan(str2double(meta_test(1)))
    meta_type               = 'new';
    if mod((length(strfind(meta_type, ',')) - 6), 4) % if there are any commas left, then this must be the new type (which includes sample diameter)
        meta_type           = 'new+';
    end
else
    meta_type               = 'old';
end

fseek(fid, 0, -1); % return to start of file

% load metadata
switch file_type
    case 'data'
        switch meta_type
            case 'new+' % also includes sample diameter
                meta_all    = textscan(fid, '%s%s%f%f%f%d%d%d', 1, 'delimiter', ',');
                [name, name_os, thick, dia_sample, dia_elec, num_file, num_file_tot, num_loop] ...
                            = deal(meta_all{:});
            case 'new'
                meta_all    = textscan(fid, '%s%s%f%f%d%d%d', 1, 'delimiter', ',');
                [name, name_os, thick, dia_elec, num_file, num_file_tot, num_loop] ...
                            = deal(meta_all{:});
                dia_sample  = 55; % default sample diameter assumed (mm)
            case 'old'
                meta_all    = textscan(fid, '%d%s%d%s%f%f%d%d%d', 1, 'delimiter', ',');
                [~, name, ~, name_os, thick, dia_elec, num_file, num_file_tot, num_loop] ...
                            = deal(meta_all{:});
                dia_sample  = 55; % default sample diameter assumed (mm)                        
        end;
        name                = name{1};
        name_os             = name_os{1};
        thick               = thick * 0.001; % convert sample thickness to m
        dia_sample          = dia_sample * 0.001; % convert sample diameter to m
        dia_elec            = dia_elec * 0.001; % convert electrode diameter to m
        area_elec           = pi * ((dia_elec / 2) ^ 2); % lower electrode area in m^2
        num_file_tot        = (num_file_tot * 2) - 1;
    case 'os'
        switch meta_type
            case 'new'
                meta_all    = textscan(fid, '%s%f%f%d', 1, 'delimiter', ',');
                [~, ~, ~, num_loop] ...
                            = deal(meta_all{:});
            case 'old'
                meta_all    = textscan(fid, '%d%s%f%f%d', 1, 'delimiter', ',');
                [~, ~, ~, ~, num_loop] ...
                            = deal(meta_all{:});
        end
end

% scan loop parameters
loop_scan                   = textscan(fid, '%f', (num_loop * 4), 'delimiter', ',');
loop_scan                   = loop_scan{1};
fclose(fid);

% load "loop" parameters for different sampling densities across different bands
[freq_max, freq_min, num_pt_decade, stack, num_pt_stack] ...
                            = deal(zeros(1, num_loop));
for ii = 1:num_loop
    freq_max(ii)            = loop_scan(1 + (4 * (ii - 1))); % max frequency for this loop
    freq_min(ii)            = loop_scan(2 + (4 * (ii - 1))); % min frequency for this loop
    num_pt_decade(ii)       = loop_scan(3 + (4 * (ii - 1))); % number of pts per frequency decade in this loop
    stack(ii)               = loop_scan(4 + (4 * (ii - 1))); % number of stack (repeats)
    num_pt_stack(ii)        = ceil((log10(freq_max(ii)) - log10(freq_min(ii))) * num_pt_decade(ii)) + 1; % number of points in stack
end
num_pt                      = sum(num_pt_stack);

% output depends on meta data type
switch file_type
    case 'data'
        [varargout{1}, varargout{2}, varargout{3}, varargout{4}, varargout{5}, varargout{6}, varargout{7}, varargout{8}, varargout{9}, varargout{10}, varargout{11}, varargout{12}, varargout{13}, varargout{14}, varargout{15}] ...
                            = deal(name, name_os, thick, dia_sample, dia_elec, area_elec, num_file, num_file_tot, num_loop, freq_max, freq_min, num_pt_decade, stack, num_pt_stack, num_pt);        
    case 'os'
        [varargout{1}, varargout{2}] ...
                            = deal(stack, num_pt);
end